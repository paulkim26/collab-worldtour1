--[[
    Author: GG3L (@GGӡL)
    Script: Animation 2.1
    Description: This script, using the default Animation behavior, adds the ability to do the following:
        - Animate an object’s scale, long side its position and rotation.
        - Choose from a variety of interpolation methods such as quadratic, cubic, and sine easing.
        - Animate an object along a custom user defined path.
    
    Permission is granted to use this script in custom rooms for Escape Simulator, provided that:
    - Credit is given to the author.
    - Neither this header nor the code is modified.

    Unauthorized distribution or modification is prohibited.
    All rights reserved by the author.
]]
if callType==LuaCallType.Init then a=0.005 b={}function c(d,e,f)return math.max(e,math.min(d,f))end function g(h,i,j,k,l)m=l*l n=m*l o=-0.5*n+m-0.5*l p=1.5*n-2.5*m+1.0 q=-1.5*n+2.0*m+0.5*l r=0.5*n-0.5*m return h*o+i*p+j*q+k*r end function s(t,u,v,w,x)y=x*x z=y*x A=Quaternion.Slerp(Quaternion.identity,t,-0.5*z+y-0.5*x)B=Quaternion.Slerp(Quaternion.identity,u,1.5*z-2.5*y+1.0)C=Quaternion.Slerp(Quaternion.identity,v,-1.5*z+2.0*y+0.5*x)D=Quaternion.Slerp(Quaternion.identity,w,0.5*z-0.5*y)return A*B*C*D end function E(F,G,H,I)I=c(I,0,1)J={[0]=function(K)return K*K*(3-2*K)end,[1]=function(K)return K end,[2]=function(K)return K*K*K*(K*(K*6-15)+10)end,[3]=function(K)return K*K end,[4]=function(K)return 1-(1-K)*(1-K)end,[5]=function(K)return K*K*(3-2*K)end,[6]=function(K)return K*K*K end,[7]=function(K)return 1-(1-K)*(1-K)*(1-K)end,[8]=function(K)return K*K*K*(K*(K*6-15)+10)end,[9]=function(K)return 1-math.cos(K*math.pi/2)end,[10]=function(K)return math.sin(K*math.pi/2)end,[11]=function(K)return-math.cos(K*math.pi)/2+0.5 end}return G+(H-G)*J[F](I)end function L(M)N={}if not M then return N end M=M:match("%[(.*)%]"):gsub("^%s*(.-)%s*$","%1")M=M:gsub(";?%s*$","")for O,P in M:gmatch("([^:;]+)%s*:%s*([^;]+)")do O=O:match("^%s*(.-)%s*$")P=P:match("^%s*(.-)%s*$")if P=="true"then P=true elseif P=="false"then P=false elseif tonumber(P)then P=tonumber(P)elseif P:match("^'.*'$")or P:match('^".*"$')then P=P:sub(2,-2)end N[O]=P end return N end function Q(R)S=R['\103\97\109\101\79\98\106\101\99\116'].GetComponent('\69\108\101\109\101\110\116')T=string.match(S['\112\108\97\121\101\114\86\97\114\105\97\98\108\101\78\97\109\101'],"{(%d+)}")return tonumber(T)end for _,U in pairs(animate)do V=U['\103\97\109\101\79\98\106\101\99\116'].GetComponent('\69\108\101\109\101\110\116')W=L(V['\101\108\101\109\101\110\116\78\97\109\101']:match("%b[]"))V['\101\108\101\109\101\110\116\78\97\109\101']=V['\101\108\101\109\101\110\116\78\97\109\101']:gsub("%b[]","",1)X={a=U['\116\114\97\110\115\102\111\114\109'],b=U['\112\105\118\111\116']['\116\114\97\110\115\102\111\114\109'],c=false,d=false,e=U['\100\117\114\97\116\105\111\110'],f=U['\108\111\111\112'],g=U['\98\111\117\110\99\101'],h=0,i=0,j=W['\105\110\116\101\114\112\111\108\97\116\105\111\110']or U['\105\110\116\101\114\112\111\108\97\116\105\111\110'],k={position=U['\112\105\118\111\116']['\116\114\97\110\115\102\111\114\109']['\112\111\115\105\116\105\111\110'],rotation=U['\112\105\118\111\116']['\116\114\97\110\115\102\111\114\109']['\114\111\116\97\116\105\111\110'],localScale=U['\112\105\118\111\116']['\116\114\97\110\115\102\111\114\109']['\108\111\99\97\108\83\99\97\108\101']},l={position=U['\116\114\97\110\115\102\111\114\109']['\112\111\115\105\116\105\111\110'],rotation=U['\116\114\97\110\115\102\111\114\109']['\114\111\116\97\116\105\111\110'],localScale=U['\116\114\97\110\115\102\111\114\109']['\108\111\99\97\108\83\99\97\108\101']},m=nil,n=false,o=nil,p=(W['\108\111\111\107\65\116\78\101\120\116']==nil)and true or W['\108\111\111\107\65\116\78\101\120\116'],q=false,r=0,s=false}Y=Q(U)if path and path[Y]then X.n=true Z={[1]=nil}for a0=0,path[Y]['\116\114\97\110\115\102\111\114\109']['\99\104\105\108\100\67\111\117\110\116']-1 do a1=path[Y]['\116\114\97\110\115\102\111\114\109']:GetChild(a0)a2=a1['\103\97\109\101\79\98\106\101\99\116'].GetComponent('\69\108\101\109\101\110\116')a3=tonumber(a2['\101\108\101\109\101\110\116\78\97\109\101'])Z[a3+1]=a1 end X.o=Z X['\116\111\116\97\108\80\97\116\104\76\101\110\103\116\104']=0 end if lookTarget and lookTarget[Y]then X.s=lookTarget[Y]['\116\114\97\110\115\102\111\114\109']end table.insert(b,X)U['\112\105\118\111\116']['\116\114\97\110\115\102\111\114\109']['\112\111\115\105\116\105\111\110']=U['\116\114\97\110\115\102\111\114\109']['\112\111\115\105\116\105\111\110']U['\112\105\118\111\116']['\116\114\97\110\115\102\111\114\109']['\114\111\116\97\116\105\111\110']=U['\116\114\97\110\115\102\111\114\109']['\114\111\116\97\116\105\111\110']U['\112\105\118\111\116']['\116\114\97\110\115\102\111\114\109']['\108\111\99\97\108\83\99\97\108\101']=U['\116\114\97\110\115\102\111\114\109']['\108\111\99\97\108\83\99\97\108\101']end end if callType==LuaCallType.SwitchStarted then if api.contains(animate,context)then Y=Q(context)b[Y].h=Time['\116\105\109\101']b[Y].i=0 if b[Y].n then if not b[Y].f or(b[Y].f and b[Y].g)then b[Y].d=not b[Y].d else b[Y].d=true end else b[Y].d=not b[Y].d end if not b[Y].f or(b[Y].f and b[Y].g)then b[Y].m={position=b[Y].b['\112\111\115\105\116\105\111\110'],rotation=b[Y].b['\114\111\116\97\116\105\111\110'],localScale=b[Y].b['\108\111\99\97\108\83\99\97\108\101']}else b[Y].m={position=b[Y].l['\112\111\115\105\116\105\111\110'],rotation=b[Y].l['\114\111\116\97\116\105\111\110'],localScale=b[Y].l['\108\111\99\97\108\83\99\97\108\101']}end if b[Y].n and b[Y].o[1]==nil then b[Y].o[1]={position=b[Y].a['\112\111\115\105\116\105\111\110'],rotation=b[Y].a['\114\111\116\97\116\105\111\110'],localScale=b[Y].a['\108\111\99\97\108\83\99\97\108\101']}for a0=1,#b[Y].o-1 do b[Y]['\116\111\116\97\108\80\97\116\104\76\101\110\103\116\104']=b[Y]['\116\111\116\97\108\80\97\116\104\76\101\110\103\116\104']+Vector3.Distance(b[Y].o[a0]['\112\111\115\105\116\105\111\110'],b[Y].o[a0+1]['\112\111\115\105\116\105\111\110'])end end b[Y].c=true b[Y].q=false end end if callType==LuaCallType.SwitchDone then if api.contains(animate,context)then Y=Q(context)b[Y].r=240 b[Y].q=true end end if callType==LuaCallType.Update then for _,U in pairs(b)do if U.c then if U.q then if U.r>0 then U.r=U.r-1 end if U.r==0 then U.q=false U.c=false end end U.i=U.i+Time['\100\101\108\116\97\84\105\109\101']a4=1 if U.e>0 then a4=U.i/U.e end a5=E(U.j,0,1,a4)a6=U.m['\112\111\115\105\116\105\111\110']a7=U.k['\112\111\115\105\116\105\111\110']if not U.n and(not U.d and not U.f)or(U.f and U.g and not U.d)then a7=U.l['\112\111\115\105\116\105\111\110']end if U.n then a8=a5*U['\116\111\116\97\108\80\97\116\104\76\101\110\103\116\104']a9=0 aa=Quaternion.identity if U.d then for ab=1,#U.o-1 do ac=Vector3.Distance(U.o[ab]['\112\111\115\105\116\105\111\110'],U.o[ab+1]['\112\111\115\105\116\105\111\110'])if a9+ac>=a8 then ad=(a8-a9)/ac ae=(ab>1)and U.o[ab-1]['\112\111\115\105\116\105\111\110']or U.o[ab]['\112\111\115\105\116\105\111\110']af=U.o[ab]['\112\111\115\105\116\105\111\110']ag=U.o[ab+1]['\112\111\115\105\116\105\111\110']ah=(ab<#U.o-1)and U.o[ab+2]['\112\111\115\105\116\105\111\110']or U.o[ab+1]['\112\111\115\105\116\105\111\110']a7=g(ae,af,ag,ah,ad)ai=ag-U.b['\112\111\115\105\116\105\111\110']if ai.sqrMagnitude>=a*a then if U.p then aj=(a7-U.b['\112\111\115\105\116\105\111\110']).normalized if U.s then aj=(U.s['\112\111\115\105\116\105\111\110']-a7).normalized end ak=Quaternion.LookRotation(aj)aa=Quaternion.Slerp(U.b['\114\111\116\97\116\105\111\110'],ak,ad)else al=(ab>1)and U.o[ab-1]['\114\111\116\97\116\105\111\110']or U.o[ab]['\114\111\116\97\116\105\111\110']am=U.o[ab]['\114\111\116\97\116\105\111\110']an=U.o[ab+1]['\114\111\116\97\116\105\111\110']ao=(ab<#U.o-1)and U.o[ab+2]['\114\111\116\97\116\105\111\110']or U.o[ab+1]['\114\111\116\97\116\105\111\110']aa=Quaternion.Slerp(am,an,ad)end U.b['\114\111\116\97\116\105\111\110']=aa end break end a9=a9+ac end else for ab=#U.o,2,-1 do ac=Vector3.Distance(U.o[ab]['\112\111\115\105\116\105\111\110'],U.o[ab-1]['\112\111\115\105\116\105\111\110'])if a9+ac>=a8 then ad=(a8-a9)/ac ae=(ab<#U.o)and U.o[ab+1]['\112\111\115\105\116\105\111\110']or U.o[ab]['\112\111\115\105\116\105\111\110']af=U.o[ab]['\112\111\115\105\116\105\111\110']ag=U.o[ab-1]['\112\111\115\105\116\105\111\110']ah=(ab>2)and U.o[ab-2]['\112\111\115\105\116\105\111\110']or U.o[ab-1]['\112\111\115\105\116\105\111\110']a7=g(ae,af,ag,ah,ad)ai=ag-U.b['\112\111\115\105\116\105\111\110']if ai.sqrMagnitude>=a*a then if U.p then aj=(a7-U.b['\112\111\115\105\116\105\111\110']).normalized if U.s then aj=(U.s['\112\111\115\105\116\105\111\110']-a7).normalized end ak=Quaternion.LookRotation(aj)aa=Quaternion.Slerp(U.b['\114\111\116\97\116\105\111\110'],ak,ad)else al=(ab<#U.o)and U.o[ab+1]['\114\111\116\97\116\105\111\110']or U.o[ab]['\114\111\116\97\116\105\111\110']am=U.o[ab]['\114\111\116\97\116\105\111\110']an=U.o[ab-1]['\114\111\116\97\116\105\111\110']ao=(ab>2)and U.o[ab-2]['\114\111\116\97\116\105\111\110']or U.o[ab-1]['\114\111\116\97\116\105\111\110']aa=Quaternion.Slerp(am,an,ad)end U.b['\114\111\116\97\116\105\111\110']=aa end break end a9=a9+ac end end U.b['\112\111\115\105\116\105\111\110']=a7 U.a['\112\111\115\105\116\105\111\110']=U.b['\112\111\115\105\116\105\111\110']U.a['\114\111\116\97\116\105\111\110']=U.b['\114\111\116\97\116\105\111\110']else U.b['\112\111\115\105\116\105\111\110']=Vector3.Lerp(a6,a7,a5)U.a['\112\111\115\105\116\105\111\110']=U.b['\112\111\115\105\116\105\111\110']ap=U.m['\114\111\116\97\116\105\111\110']aq=U.k['\114\111\116\97\116\105\111\110']if not U.d then aq=U.l['\114\111\116\97\116\105\111\110']end U.b['\114\111\116\97\116\105\111\110']=Quaternion.Slerp(ap,aq,a5)U.a['\114\111\116\97\116\105\111\110']=U.b['\114\111\116\97\116\105\111\110']end ar=U.m['\108\111\99\97\108\83\99\97\108\101']as=U.k['\108\111\99\97\108\83\99\97\108\101']if not U.d then as=U.l['\108\111\99\97\108\83\99\97\108\101']end U.b['\108\111\99\97\108\83\99\97\108\101']=Vector3.Lerp(ar,as,a5)U.a['\108\111\99\97\108\83\99\97\108\101']=U.b['\108\111\99\97\108\83\99\97\108\101']end end end
